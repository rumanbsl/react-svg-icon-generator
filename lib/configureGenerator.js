'use strict';

exports.__esModule = true;
exports['default'] = configureGenerator;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _helpersGetSvgsInDir = require('./helpers/getSvgsInDir');

var _helpersGetSvgsInDir2 = _interopRequireDefault(_helpersGetSvgsInDir);

var _helpersMinifySvg = require('./helpers/minifySvg');

var _helpersMinifySvg2 = _interopRequireDefault(_helpersMinifySvg);

var _nunjucks = require('nunjucks');

var _nunjucks2 = _interopRequireDefault(_nunjucks);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpersCleanup = require('./helpers/cleanup');

_nunjucks2['default'].configure({ autoescape: false });

var defaultComment = 'Generated by gulp svg-icon - do not modify manually';
var defaultComponentName = 'Icon';

function configureGenerator(config) {
  return function () {
    var componentName = config.componentName || defaultComponentName;
    var defaultTemplate = config.native ? _path2['default'].join(__dirname, '..', 'template', 'icon_native.nunjucks') : _path2['default'].join(__dirname, '..', 'template', 'icon.nunjucks');
    var template = config.template || defaultTemplate;
    var templateFile = _path2['default'].isAbsolute(template) ? template : _path2['default'].join(process.cwd(), template);
    var templateContent = _fs2['default'].readFileSync(templateFile).toString();

    var svgDir = _path2['default'].isAbsolute(config.svgDir) ? config.svgDir : _path2['default'].join(process.cwd(), config.svgDir);

    console.log('Looking for SVGs in:', svgDir); // eslint-disable-line no-console

    console.log('Using ' + componentName + ' template from:', templateFile); // eslint-disable-line no-console

    var svgs = _helpersGetSvgsInDir2['default'](svgDir);

    var iconDestination = config.destination || _path2['default'].join(process.cwd(), 'Icon.react.js');

    var comment = config.comment || defaultComment;
    var reactPureRender = config.reactPureRender;
    var cleanupHelper = config.native ? _helpersCleanup.cleanupNativeSvg : _helpersCleanup.cleanupSvg;

    var svgPromises = svgs.map(function (file) {
      return _helpersMinifySvg2['default'](file, _fs2['default'].readFileSync(file).toString());
    });
    Promise.all(svgPromises).then(function (results) {
      var icons = results.map(function (result) {
        return {
          name: _helpersCleanup.cleanupName(result.name),
          svg: cleanupHelper(result.svg.data, config.keepFillColor)
        };
      }).sort(function (a, b) {
        return a.name.localeCompare(b.name);
      });

      _fs2['default'].writeFileSync(iconDestination, _nunjucks2['default'].renderString(templateContent, {
        icons: icons,
        comment: comment,
        reactPureRender: reactPureRender,
        radium: config.radium,
        useColorProp: !config.keepFillColor,
        componentName: componentName
      }));

      console.log('Generated ' + componentName + ' component to:', iconDestination); // eslint-disable-line no-console
      console.log(icons.map(function (icon) {
        return '<' + componentName + ' kind="' + icon.name + '" />';
      }).join('\n')); // eslint-disable-line no-console
    })['catch'](function (error) {
      return console.error(error);
    }); // eslint-disable-line no-console
  };
}

module.exports = exports['default'];