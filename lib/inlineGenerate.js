'use strict';

exports.__esModule = true;
exports['default'] = generateInline;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersMinifySvgBrowser = require('./helpers/minifySvgBrowser');

var _helpersMinifySvgBrowser2 = _interopRequireDefault(_helpersMinifySvgBrowser);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _templateIconNunjucks = require('../template/icon.nunjucks');

var _templateIconNunjucks2 = _interopRequireDefault(_templateIconNunjucks);

var _helpersCleanup = require('./helpers/cleanup');

var defaultComment = 'Generated by gulp svg-icon - do not modify manually';

function readFile(file) {
  var name = file.name;

  return new _bluebird2['default'](function (resolve) {
    var reader = new FileReader();
    reader.onload = function (e) {
      return resolve({ name: name, content: e.target.result });
    };
    reader.readAsText(file);
  });
}

function generateInline(config, svgFiles) {
  var comment = config.comment || defaultComment;
  var reactPureRender = config.reactPureRender;

  var fileReaders = svgFiles.map(function (file) {
    return readFile(file);
  });

  return _bluebird2['default'].all(fileReaders).then(function (svgs) {
    var svgPromises = svgs.map(function (file) {
      return _helpersMinifySvgBrowser2['default'](file.name, file.content);
    });

    return _bluebird2['default'].all(svgPromises).then(function (results) {
      var icons = results.map(function (result) {
        return {
          filename: result.filename,
          name: _helpersCleanup.cleanupName(result.name),
          svg: _helpersCleanup.cleanupSvg(result.svg.data)
        };
      }).sort(function (a, b) {
        return a.name.localeCompare(b.name);
      });

      return {
        icons: icons,
        source: _templateIconNunjucks2['default'].render({ icons: icons, comment: comment, reactPureRender: reactPureRender })
      };
    });
  });
}

module.exports = exports['default'];